"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
exports.LWC_CONFIG_FILE = 'lwc.config.json';
const DEFAULT_CONFIG = { modules: [] };
function isString(str) {
    return Object.prototype.toString.call(str) === '[object String]';
}
exports.isString = isString;
function loadConfig(configPath) {
    const configFile = path_1.default.join(configPath, exports.LWC_CONFIG_FILE);
    if (!fs_1.default.existsSync(configFile)) {
        return DEFAULT_CONFIG;
    }
    try {
        return JSON.parse(fs_1.default.readFileSync(path_1.default.join(configPath, exports.LWC_CONFIG_FILE), 'utf8'));
    }
    catch (e) {
        return DEFAULT_CONFIG;
    }
}
exports.loadConfig = loadConfig;
function getEntry(moduleDir, moduleName, ext) {
    return path_1.default.join(moduleDir, `${moduleName}.${ext}`);
}
exports.getEntry = getEntry;
function getModuleEntry(moduleDir, moduleName) {
    const entryJS = getEntry(moduleDir, moduleName, 'js');
    const entryTS = getEntry(moduleDir, moduleName, 'ts');
    const entryHTML = getEntry(moduleDir, moduleName, 'html');
    const entryCSS = getEntry(moduleDir, moduleName, 'css');
    // Order is important
    if (fs_1.default.existsSync(entryJS)) {
        return entryJS;
    }
    else if (fs_1.default.existsSync(entryTS)) {
        return entryTS;
    }
    else if (fs_1.default.existsSync(entryHTML)) {
        return entryHTML;
    }
    else if (fs_1.default.existsSync(entryCSS)) {
        return entryCSS;
    }
}
exports.getModuleEntry = getModuleEntry;
function normalizeConfig(config) {
    const rootDir = config.rootDir ? path_1.default.resolve(config.rootDir) : process.cwd();
    const modules = config.modules || [];
    return {
        ...DEFAULT_CONFIG,
        modules,
        rootDir,
    };
}
exports.normalizeConfig = normalizeConfig;
// The modules can be either string or ModuleRecordObject { name, path }
//
// user define modules will have precedence over the ones defined elsewhere (ex. npm)
function mergeModules(userModules, configModules) {
    const visited = new Set();
    const modules = userModules;
    // Visit the user modules to created an index with the name as keys
    userModules.forEach(m => {
        visited.add(isString(m) ? m : m.name);
    });
    configModules.forEach(m => {
        // Collect all of the modules unless they been already defined in userland
        if (isString(m) || !visited.has(m.name)) {
            modules.push(m);
        }
    });
    return modules;
}
exports.mergeModules = mergeModules;
//# sourceMappingURL=utils.js.map