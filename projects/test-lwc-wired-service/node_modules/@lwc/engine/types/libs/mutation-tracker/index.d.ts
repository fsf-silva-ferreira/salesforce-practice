export declare function valueMutated(target: object, key: PropertyKey): void;
export declare function valueObserved(target: object, key: PropertyKey): void;
declare type CallbackFunction = (rp: ReactiveObserver) => void;
declare type JobFunction = () => void;
export declare class ReactiveObserver {
    private listeners;
    private callback;
    constructor(callback: CallbackFunction);
    observe(job: JobFunction): void;
    /**
     * This method is responsible for disconnecting the Reactive Observer
     * from any Reactive Record that has a reference to it, to prevent future
     * notifications about previously recorded access.
     */
    reset(): void;
    notify(): void;
    link(reactiveObservers: ReactiveObserver[]): void;
}
export {};
