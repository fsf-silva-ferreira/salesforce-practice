import { SlotSet } from './vm';
import { ComponentConstructor } from './component';
import { VNode, VNodeData, VNodes, VElement, VText, Key, VCustomElement } from '../3rdparty/snabbdom/types';
export interface ElementCompilerData extends VNodeData {
    key: Key;
}
export interface CustomElementCompilerData extends ElementCompilerData {
    ns: undefined;
}
export interface RenderAPI {
    s(slotName: string, data: ElementCompilerData, children: VNodes, slotset: SlotSet): VNode;
    h(tagName: string, data: ElementCompilerData, children: VNodes): VNode;
    c(tagName: string, Ctor: ComponentConstructor, data: CustomElementCompilerData, children?: VNodes): VNode;
    i(items: any[], factory: () => VNode | VNode): VNodes;
    f(items: any[]): any[];
    t(text: string): VText;
    d(value: any): VNode | null;
    b(fn: EventListener): EventListener;
    fb(fn: (...args: any[]) => any): (...args: any[]) => any;
    ll(originalHandler: EventListener, id: string, provider?: () => any): EventListener;
    k(compilerKey: number, iteratorValue: any): string | void;
}
export declare function h(sel: string, data: ElementCompilerData, children: VNodes): VElement;
export declare function ti(value: any): number;
export declare function s(slotName: string, data: ElementCompilerData, children: VNodes, slotset: SlotSet | undefined): VElement;
export declare function c(sel: string, Ctor: ComponentConstructor, data: CustomElementCompilerData, children?: VNodes): VCustomElement;
export declare function i(iterable: Iterable<any>, factory: (value: any, index: number, first: boolean, last: boolean) => VNodes | VNode): VNodes;
/**
 * [f]lattening
 */
export declare function f(items: any[]): any[];
export declare function t(text: string): VText;
export declare function d(value: any): VNode | null;
export declare function b(fn: EventListener): EventListener;
export declare function fb(fn: (...args: any[]) => any): () => any;
export declare function ll(originalHandler: EventListener, id: string, context?: (...args: any[]) => any): EventListener;
export declare function k(compilerKey: number, obj: any): string | void;
export declare function gid(id: string | undefined | null): string | null | undefined;
export declare function fid(url: string | undefined | null): string | null | undefined;
/**
 * create a dynamic component via `<x-foo lwc:dynamic={Ctor}>`
 */
export declare function dc(sel: string, Ctor: ComponentConstructor | null | undefined, data: CustomElementCompilerData, children?: VNodes): VCustomElement | null;
/**
 * slow children collection marking mechanism. this API allows the compiler to signal
 * to the engine that a particular collection of children must be diffed using the slow
 * algo based on keys due to the nature of the list. E.g.:
 *
 *   - slot element's children: the content of the slot has to be dynamic when in synthetic
 *                              shadow mode because the `vnode.children` might be the slotted
 *                              content vs default content, in which case the size and the
 *                              keys are not matching.
 *   - children that contain dynamic components
 *   - children that are produced by iteration
 *
 */
export declare function sc(vnodes: VNodes): VNodes;
